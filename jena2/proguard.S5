#
# This ProGuard configuration file illustrates how to process applications.
# Usage:
#     java -jar proguard.jar @applications.pro
#
-repackageclasses s5technologies
-dontwarn
-dontnote

# Specify the input jars, output jars, and library jars.

-injars  dist/S5TNET-core-RELEASE.jar
-outjars dist/S5TNET-core-public-proguard.jar

-libraryjars <java.home>/lib/rt.jar
-libraryjars <java.home>/lib/jsse.jar
-libraryjars <java.home>/lib/jce.jar

-libraryjars lib/Piccolo.jar
-libraryjars lib/RXTXcomm.jar
-libraryjars lib/activemq-core-5.2.0.jar
-libraryjars lib/castor-1.3.1-anttasks.jar
-libraryjars lib/castor-1.3.1-codegen.jar
-libraryjars lib/castor-1.3.1-xml-schema.jar
-libraryjars lib/castor-core-1.3.2-SNAPSHOT.jar
-libraryjars lib/castor-xml-1.3.2-SNAPSHOT.jar
-libraryjars lib/castorbuilder.properties
-libraryjars lib/commons-cli-1.1.jar
-libraryjars lib/commons-fileupload-1.2.2.jar
-libraryjars lib/commons-io-1.2.jar
-libraryjars lib/commons-lang.jar
-libraryjars lib/commons-logging-1.1.1.jar
-libraryjars lib/geronimo-j2ee-management_1.0_spec-1.0.jar
-libraryjars lib/geronimo-jms_1.1_spec-1.1.1.jar
-libraryjars lib/iText-5.0.2.jar
-libraryjars lib/jetty-6.1.26.jar
-libraryjars lib/jetty-util-6.1.26.jar
-libraryjars lib/jsch-20120203.jar
-libraryjars lib/mockito-all-1.8.5.jar
-libraryjars lib/rabbitmq-client.jar
-libraryjars lib/servlet-api-2.5-20081211.jar
-libraryjars lib/slf4j-api-1.6.0.jar
-libraryjars lib/hsqldb.jar
-libraryjars lib/logback-classic-0.9.21.jar
-libraryjars lib/logback-core-0.9.21.jar

-libraryjars lib/servlet-api-2.5-20081211.jar
-libraryjars lib/jsp-2.1-glassfish-2.1.v20091210.jar
-libraryjars lib/jsp-2.1-jetty-6.1.26.jar
-libraryjars lib/jsp-api-2.1-glassfish-2.1.v20091210.jar

-libraryjars lib/mina-core-2.0.4.jar
-libraryjars lib/ftpserver-core-1.0.6.jar

-libraryjars dist/S5TNET-core-public-xml.jar

# ...

# Save the obfuscation mapping to a file, so you can de-obfuscate any stack
# traces later on. Keep a fixed source file attribute and all line number
# tables to get line numbers in the stack traces.
# You can comment this out if you're not interested in stack traces.

-printmapping out.map
-renamesourcefileattribute SourceFile
-keepattributes SourceFile,LineNumberTable

# Preserve all annotations.

-keepattributes *Annotation*

# You can print out the seeds that are matching the keep options below.

#-printseeds out.seeds

# Preserve all public applications.

-keepclasseswithmembers public class * {
    public static void main(java.lang.String[]);
}

# Preserve all native method names and the names of their classes.

-keepclasseswithmembernames class * {
    native <methods>;
}

# Preserve the special static methods that are required in all enumeration
# classes.

-keepclassmembers class * extends java.lang.Enum {
    public static **[] values();
    public static ** valueOf(java.lang.String);
}

# Explicitly preserve all serialization members. The Serializable interface
# is only a marker interface, so it wouldn't save them.
# You can comment this out if your application doesn't use serialization.
# If your code contains serializable classes that have to be backward 
# compatible, please refer to the manual.
-keepclassmembers class * implements java.io.Serializable {
    static final long serialVersionUID;
    static final java.io.ObjectStreamField[] serialPersistentFields;
    private void writeObject(java.io.ObjectOutputStream);
    private void readObject(java.io.ObjectInputStream);
    java.lang.Object writeReplace();
    java.lang.Object readResolve();
}

# Your application may contain more items that need to be preserved; 
# typically classes that are dynamically created using Class.forName:

# -keep public interface mypackage.MyInterface
# -keep public class * implements mypackage.MyInterface

#-keepclassmembers,allowoptimization enum com.s5tech.net.xml.types.* {
#    public static **[] values();
#    public static ** valueOf(java.lang.String);
#}

-keep public class com.s5tech.net.desktop.S5TechDesktopApp
